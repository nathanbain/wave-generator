require "selenium-webdriver"
require "colorize"

class WaveGenerator

  def make_waves
    begin

      #
      # Setup the Selenium Browser and goto the URL to be assessed for accessibility
      driver = setup_driver
      driver.navigate.to url_to_be_assessed

      #
      # Run Wave Toolbar to get the Accessibility Tips
      run_wave_from_context_menu

      #
      # Give the Wave Tips elements time to appear
      sleep 2

      #
      # Collect all the Wave Tips elements
      found_elements = driver.find_elements(:class_name, "wave4tip")
      tips = found_elements.collect {|element| { alt: element[:alt], description: element[:description] } }

      #
      # Generate the Wave Tips report
      report(tips)
    rescue
      raise
    ensure
      driver.quit
    end
  end

  def initialize(url_to_be_assessed, reporting_level = :errors)
    @url_to_be_assessed = url_to_be_assessed
    @reporting_level    = reporting_level
  end

  private

  WAVE_TOOLBAR_XPI_RELATIVE_LOCATION = "./lib/wavetoolbar1_1_8_en.xpi"
  
  attr_accessor :url_to_be_assessed, :reporting_level, :driver

  def setup_driver
    profile = Selenium::WebDriver::Firefox::Profile.new
    # 
    # Add the Wave Tool Bar extention for Firefox which creates our Accessibility reports
    profile.add_extension(WAVE_TOOLBAR_XPI_RELATIVE_LOCATION)

    @driver = Selenium::WebDriver.for :firefox, :profile => profile
  end

  def run_wave_from_context_menu
    #
    # The Wave report is generated by selecting the "Errors, Features and Alerts" option in the Wave Toolbar.
    # I have only tried this out on OSX, which has no hotkey for the Tools menu, so I used the context menu instead.
    # I assume this will work just as well on Windows, Linux or any other Firefox supported system.

    #
    # First we need to click on the page itself so the correct context menu appears.
    body_element = driver.find_element(:tag_name, "body")
    @driver.mouse.context_click(body_element)

    #
    # Then we send the appropriate keys to select the "Errors, Features and Alerts" option.
    # See: http://selenium.googlecode.com/svn/trunk/docs/api/rb/Selenium/WebDriver/Keys.html
    @driver.action.send_keys(:arrow_up).perform
    @driver.action.send_keys(:arrow_right).perform
    @driver.action.send_keys(:enter).perform
  end

  def report(tips)

    if tips.count == 0
      nothing_to_report
      return
    end

    case @reporting_level
    when :errors
      errors_report(tips)
    when :errors_and_features
      errors_and_features_report(tips)
    when :all
      all_wave_tips_report(tips)
    end
  end

  def nothing_to_report
    puts "Wave Accessibility Report".blue
    puts "~~~~~~~~~~~~~~~~~~~~~~~~~\n".blue
    puts "There were no accessibility errors to report :-)"
  end

  def errors_report(tips)
    puts "Wave Accessibility Report - Showing Errors Only".blue
    puts "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n".blue
    errors = tips.select {|tip| tip[:alt].include? "ERROR:"}
    errors.each {|tip| puts "* #{tip[:alt]}: #{tip[:description]}" }
    puts "\n"
    print "Summary: "
    print "Errors (#{errors.count})".red
    puts "\n"
  end

  def errors_and_features_report(tips)
    puts "Wave Accessibility Report - Showing Errors & Features Only".blue
    puts "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n".blue
    errors = tips.select {|tip| tip[:alt].include? "ERROR:"}
    errors.each {|tip| puts "* #{tip[:alt]}: #{tip[:description]}" }
    features = tips.select {|tip| tip[:alt].include? "FEATURE:"}
    features.each {|tip| puts "* #{tip[:alt]}: #{tip[:description]}" }
    puts "\n"
    print "Summary: "
    print "Errors (#{errors.count})".red
    print " Features (#{features.count})".yellow
    puts "\n"
  end

  def all_wave_tips_report(tips)
    puts "Wave Accessibility Report - Showing All Wave Tips".blue
    puts "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n".blue
    errors = tips.select {|tip| tip[:alt].include? "ERROR:"}
    errors.each {|tip| puts "* #{tip[:alt]}: #{tip[:description]}" }
    features = tips.select {|tip| tip[:alt].include? "FEATURE:"}
    features.each {|tip| puts "* #{tip[:alt]}: #{tip[:description]}" }
    others = tips.reject {|tip| tip[:alt].include? "ERROR:"}
                 .reject {|tip| tip[:alt].include? "FEATURE:"}
    others.each {|tip| puts "* #{tip[:alt]}: #{tip[:description]}" }
    puts "\n"
    print "Summary: "
    print "Errors (#{errors.count})".red
    print " Features (#{features.count})".yellow
    print " Others (#{others.count})".green
    puts "\n"
  end
end
